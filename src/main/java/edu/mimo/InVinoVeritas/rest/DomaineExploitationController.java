package edu.mimo.InVinoVeritas.rest;

import edu.mimo.InVinoVeritas.model.DomaineExploitation;
import edu.mimo.InVinoVeritas.service.DomaineExploitationService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/domaine")
public class DomaineExploitationController {

    private final DomaineExploitationService domaineExploitationService;

    public DomaineExploitationController(DomaineExploitationService domaineExploitationService) {
        this.domaineExploitationService = domaineExploitationService;
    }

    @GetMapping
    public List<DomaineExploitation> getAllDomaines() {
        return domaineExploitationService.allDomaineExploitations();
    }

    @GetMapping("/{id}")
    public ResponseEntity<DomaineExploitation> getDomaineById(@PathVariable Integer id) {
        Optional<DomaineExploitation> domaineExploitation = domaineExploitationService.rechercheDomaineExploitationParId(id);
        return domaineExploitation.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @GetMapping("/search")
    public List<DomaineExploitation> searchDomainesByName(@RequestParam String nom) {
        return domaineExploitationService.rechercheDomaineExploitationsParNom(nom);
    }

    @PostMapping
    public ResponseEntity<DomaineExploitation> createDomaine(@RequestBody DomaineExploitation domaineExploitation) {
        DomaineExploitation savedDomaineExploitation = domaineExploitationService.enregistreDomaineExploitation(domaineExploitation);
        return ResponseEntity.ok(savedDomaineExploitation);
    }

    @PutMapping("/{id}")
    public ResponseEntity<DomaineExploitation> updateDomaine(@PathVariable Integer id, @RequestBody DomaineExploitation domaineExploitation) {
        Optional<DomaineExploitation> existingDomaine = domaineExploitationService.rechercheDomaineExploitationParId(id);

        if (existingDomaine.isPresent()) {
            DomaineExploitation updatedDomaine = existingDomaine.get();
            updatedDomaine.setNom(domaineExploitation.getNom());
            updatedDomaine.setRegion(domaineExploitation.getRegion());
            updatedDomaine.setProprietaire(domaineExploitation.getProprietaire());
            updatedDomaine.setDateDeCreation(domaineExploitation.getDateDeCreation());
            updatedDomaine.setSuperficie(domaineExploitation.getSuperficie());

            DomaineExploitation savedDomaine = domaineExploitationService.enregistreDomaineExploitation(updatedDomaine);
            return ResponseEntity.ok(savedDomaine);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteDomaine(@PathVariable Integer id) {
        Optional<DomaineExploitation> existingDomaine = domaineExploitationService.rechercheDomaineExploitationParId(id);

        if (existingDomaine.isPresent()) {
            domaineExploitationService.supressionDomaineExploitationParId(id);
            return ResponseEntity.ok().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
